#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ MOEX RSS —Å –∑–∞–ø–∏—Å—å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
"""
import asyncio
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app_parsing.parsers.moex_rss import MoexRssParser


async def test_moex_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä MOEX RSS –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ MOEX RSS...")
    print("üìä –ü–∞—Ä—Å–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —á–∞—Å–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
    parser = MoexRssParser(max_articles=50)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        print("‚è≥ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        results = await parser.parse()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(results)} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        if not results:
            print("‚ùå –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
        output_data = []
        for i, news in enumerate(results, 1):
            news_data = {
                "index": i,
                "headline": news.headline,
                "source": news.source,
                "created_at": news.created_at.isoformat(),
                "url": news.url,
                "body_length": len(news.body),
                "body_preview": news.body[:200] + "..." if len(news.body) > 200 else news.body,
                "full_body": news.body
            }
            output_data.append(news_data)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"test/moex_news_{timestamp}.json"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫—Ä–∞—Ç–∫–∏–º –æ—Ç—á–µ—Ç–æ–º
        report_file = f"test/moex_report_{timestamp}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"–û–¢–ß–ï–¢ –û –ü–ê–†–°–ò–ù–ì–ï MOEX RSS\n")
            f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(results)}\n")
            f.write(f"=" * 50 + "\n\n")
            
            for i, news in enumerate(results, 1):
                f.write(f"{i}. {news.headline}\n")
                f.write(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {news.source}\n")
                f.write(f"   –î–∞—Ç–∞: {news.created_at}\n")
                f.write(f"   URL: {news.url}\n")
                f.write(f"   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(news.body)} —Å–∏–º–≤–æ–ª–æ–≤\n")
                f.write(f"   –ü—Ä–µ–≤—å—é: {news.body[:150]}...\n")
                f.write("-" * 50 + "\n\n")
        
        print(f"üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(results)}")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {sum(len(n.body) for n in results) // len(results)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –°–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: {max(len(n.body) for n in results)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚Ä¢ –°–∞–º–∞—è –∫–æ—Ä–æ—Ç–∫–∞—è –Ω–æ–≤–æ—Å—Ç—å: {min(len(n.body) for n in results)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        print(f"\nüì∞ –ü–†–ò–ú–ï–†–´ –ó–ê–ì–û–õ–û–í–ö–û–í:")
        for i, news in enumerate(results[:5], 1):
            print(f"   {i}. {news.headline}")
        
        if len(results) > 5:
            print(f"   ... –∏ –µ—â–µ {len(results) - 5} –Ω–æ–≤–æ—Å—Ç–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê MOEX RSS")
    print("=" * 50)
    
    success = asyncio.run(test_moex_parser())
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É test/ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)
